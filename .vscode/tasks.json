{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  // Visual Studio Code Tasks demo
  "version": "2.0.0",
  "tasks": [
    {
      "label": "[ORG]: Remove and Create New Developer Org (Alias 'dev')",
      "type": "shell",
      "command": "cci org remove dev && cci org info dev && cci flow run deploy_qbrix --org dev && cci task run snapshot_changes && echo 'New Developer Scratch Org has been created with alias dev.'",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[ORG]: Remove and Create New QA/Testing Org (Alias 'qa')",
      "type": "shell",
      "command": "cci org remove qa && cci flow run qa_org --org qa && echo 'New Developer Scratch Org has been created with alias qa.'",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[ORG]: Clean Up Scratch Orgs and Expired Orgs",
      "type": "shell",
      "command": "cci org remove dev && cci org remove qa && cci org remove dev_preview && cci org prune && echo 'Org Cleanup Complete!'",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[ORG]: List connected orgs for this project",
      "type": "shell",
      "command": "cci org list",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "Q BRIX [CONNECT]: Connect to a Production Org/TSO and Deploy Solution",
      "type": "shell",
      "command": "cci org connect ${input:OrgAlias} && cci flow run solution_deploy --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[CONNECT]: Connect to a Sandbox and Deploy Solution",
      "type": "shell",
      "command": "cci org connect ${input:OrgAlias} --sandbox && cci flow run solution_deploy --org ${input:OrgAlias} && cci task run snapshot_changes --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[CONNECT]: Connect to a Sandbox",
      "type": "shell",
      "command": "cci org connect ${input:OrgAlias} --sandbox",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[CONNECT]: Connect to a Production Org/TSO",
      "type": "shell",
      "command": "cci org connect ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[CONNECT]: Disconnect from org and delete scratch org (if scratch org)",
      "type": "shell",
      "command": "cci org remove ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[SAVE]: Save Changes to GitHub",
      "type": "shell",
      "command": "git add . && git commit -m '${input:CommitMessage}' && git push && git pull && echo 'Save complete!'",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[BUILD]: Snapshot Current Changes (Run before making changes to org)",
      "type": "shell",
      "command": "cci task run snapshot_changes --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[INFO]: Show information about a specified task.",
      "type": "shell",
      "command": "cci task info ${input:TaskName}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[INFO]: Show information about a specified flow.",
      "type": "shell",
      "command": "cci task info ${input:FlowName}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[INFO]: Show information about a connected org.",
      "type": "shell",
      "command": "cci org info ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[SAVE]: Review a List of Changes in org",
      "type": "shell",
      "command": "cci task run list_changes --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[SAVE]: Retrieve Changes from org",
      "type": "shell",
      "command": "cci task run retrieve_changes --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[DEPLOY]: Deploy entire solution to specified org",
      "type": "shell",
      "command": "cci flow run solution_deploy --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[DATA]: Extract Dataset from specified org",
      "type": "shell",
      "command": "cci task run capture_sample_data --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[DATA]: Deploy Dataset to specified org",
      "type": "shell",
      "command": "cci task run load_sample_data --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[DEPLOY]: Deploy specific folder to specified org",
      "type": "shell",
      "command": "cci task run deploy --path ${input:FolderString} --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[RETRIEVE]: Retrieve specific Metadata from Specified Org",
      "type": "shell",
      "command": "cci task run dx --command 'force:source:retrieve -m \"${input:MetadataString}\"' --org ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[RETRIEVE]: Retrieve unmanaged package metadata from specified org and merge into force-app",
      "type": "shell",
      "command": "cci task run retrieve_src --org ${input:OrgAlias} --package ${input:PackageName} && cci task run dx_convert_to",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[SAVE]: Retrieve ALL Project metadata from org",
      "type": "shell",
      "command": "cp -r ./force-app ./backup && cci task run dx --command 'force:source:retrieve -p force-app' --org ${input:OrgAlias} && echo 'Check Custom Objects and Profiles if any as additional metadata may have been captured. Then remove backup folder.'",
      "windows": {
        "command": "xcopy .\\force-app .\\backup /e && cci task run dx --command 'force:source:retrieve -p force-app' --org ${input:OrgAlias} && echo 'Check Custom Objects and Profiles if any as additional metadata may have been captured. Then remove backup folder.'"
      },
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[ORG]: Open Org in Browser",
      "type": "shell",
      "command": "cci org browser ${input:OrgAlias}",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    },
    {
      "label": "[INFO]: List Installed Packages in Org",
      "type": "shell",
      "command": "cci task run dx --org ${input:OrgAlias} --command force:package:installed:list",
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem",
        "focus": true,
        "echo": false,
        "showReuseMessage": false,
        "panel": "shared"
      }
    }
  ],
  "inputs": [
    {
      "id": "OrgAlias",
      "description": "Please enter the org alias for the TSO",
      "default": "dev",
      "type": "promptString"
    },
    {
      "id": "VersionNumber",
      "description": "Enter the version number you wish to publish",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "CommitMessage",
      "description": "Provide a short summary of your changes (less than 100 characters):",
      "default": "Update",
      "type": "promptString"
    },
    {
      "id": "Commit",
      "description": "Enter commit you want to publish:",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "FolderString",
      "description": "Enter the relative path to the folder:",
      "default": "force-app",
      "type": "promptString"
    },
    {
      "id": "MetadataString",
      "description": "Enter the sfdx formatted Metadata Type and api name of metadata object (e.g. CustomField:MyTestField__c):",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "DataFolderString",
      "description": "Enter the relative path to the data folder:",
      "default": "datasets",
      "type": "promptString"
    },
    {
      "id": "SqlDataFolderString",
      "description": "Enter the relative path to the sql data folder:",
      "default": "datasets",
      "type": "promptString"
    },
    {
      "id": "PackageName",
      "description": "Enter the api name of the unmanaged package:",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "TaskName",
      "description": "Enter the name of the task:",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "FlowName",
      "description": "Enter the name of the flow:",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "MetadataType",
      "description": "Enter the metadata type (use the folder name, such as fields,flows):",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "ApiNames",
      "description": "Enter the API names, you can enter multiple, separated by comma, include object api name if the metadata sits within an object folder, like field or recordtype:",
      "default": "",
      "type": "promptString"
    },
    {
      "id": "DependencyFlow",
      "description": "Enter the name of the cci flow you want to use to determine your depencencies:",
      "default": "deploy_qbrix",
      "type": "promptString"
    }
  ]
}
